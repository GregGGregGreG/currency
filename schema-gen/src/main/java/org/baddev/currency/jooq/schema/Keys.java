/**
 * This class is generated by jOOQ
 */
package org.baddev.currency.jooq.schema;


import org.baddev.currency.jooq.schema.tables.*;
import org.baddev.currency.jooq.schema.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import javax.annotation.Generated;


/**
 * A class modelling foreign key relationships between tables of the <code>exchanger</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ExchangeOperationRecord, Long> IDENTITY_EXCHANGE_OPERATION = Identities0.IDENTITY_EXCHANGE_OPERATION;
    public static final Identity<ExchangeRateRecord, Long> IDENTITY_EXCHANGE_RATE = Identities0.IDENTITY_EXCHANGE_RATE;
    public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ExchangeOperationRecord> KEY_EXCHANGE_OPERATION_PRIMARY = UniqueKeys0.KEY_EXCHANGE_OPERATION_PRIMARY;
    public static final UniqueKey<ExchangeRateRecord> KEY_EXCHANGE_RATE_PRIMARY = UniqueKeys0.KEY_EXCHANGE_RATE_PRIMARY;
    public static final UniqueKey<ExchangeTaskRecord> KEY_EXCHANGE_TASK_PRIMARY = UniqueKeys0.KEY_EXCHANGE_TASK_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_USER_USERNAME_UINDEX = UniqueKeys0.KEY_USER_USER_USERNAME_UINDEX;
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = UniqueKeys0.KEY_USER_ROLE_PRIMARY;
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_USER_ROLE_ROLE_NAME_UINDEX = UniqueKeys0.KEY_USER_ROLE_USER_ROLE_ROLE_NAME_UINDEX;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UserDetailsRecord, UserRecord> USER_DETAILS_USER_ID_FK = ForeignKeys0.USER_DETAILS_USER_ID_FK;
    public static final ForeignKey<UserUserRoleRecord, UserRecord> USER_USER_ROLE_USER_ID_FK = ForeignKeys0.USER_USER_ROLE_USER_ID_FK;
    public static final ForeignKey<UserUserRoleRecord, UserRoleRecord> USER_USER_ROLE_USER_ROLE_ID_FK = ForeignKeys0.USER_USER_ROLE_USER_ROLE_ID_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<ExchangeOperationRecord, Long> IDENTITY_EXCHANGE_OPERATION = createIdentity(ExchangeOperation.EXCHANGE_OPERATION, ExchangeOperation.EXCHANGE_OPERATION.ID);
        public static Identity<ExchangeRateRecord, Long> IDENTITY_EXCHANGE_RATE = createIdentity(ExchangeRate.EXCHANGE_RATE, ExchangeRate.EXCHANGE_RATE.ID);
        public static Identity<UserRecord, Long> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<ExchangeOperationRecord> KEY_EXCHANGE_OPERATION_PRIMARY = createUniqueKey(ExchangeOperation.EXCHANGE_OPERATION, "KEY_exchange_operation_PRIMARY", ExchangeOperation.EXCHANGE_OPERATION.ID);
        public static final UniqueKey<ExchangeRateRecord> KEY_EXCHANGE_RATE_PRIMARY = createUniqueKey(ExchangeRate.EXCHANGE_RATE, "KEY_exchange_rate_PRIMARY", ExchangeRate.EXCHANGE_RATE.ID);
        public static final UniqueKey<ExchangeTaskRecord> KEY_EXCHANGE_TASK_PRIMARY = createUniqueKey(ExchangeTask.EXCHANGE_TASK, "KEY_exchange_task_PRIMARY", ExchangeTask.EXCHANGE_TASK.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_USERNAME_UINDEX = createUniqueKey(User.USER, "KEY_user_user_username_uindex", User.USER.USERNAME);
        public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = createUniqueKey(UserRole.USER_ROLE, "KEY_user_role_PRIMARY", UserRole.USER_ROLE.ID);
        public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_USER_ROLE_ROLE_NAME_UINDEX = createUniqueKey(UserRole.USER_ROLE, "KEY_user_role_user_role_role_name_uindex", UserRole.USER_ROLE.ROLE_NAME);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<UserDetailsRecord, UserRecord> USER_DETAILS_USER_ID_FK = createForeignKey(org.baddev.currency.jooq.schema.Keys.KEY_USER_PRIMARY, UserDetails.USER_DETAILS, "user_details_user_id_fk", UserDetails.USER_DETAILS.USER_ID);
        public static final ForeignKey<UserUserRoleRecord, UserRecord> USER_USER_ROLE_USER_ID_FK = createForeignKey(org.baddev.currency.jooq.schema.Keys.KEY_USER_PRIMARY, UserUserRole.USER_USER_ROLE, "user_user_role_user_id_fk", UserUserRole.USER_USER_ROLE.USER_ID);
        public static final ForeignKey<UserUserRoleRecord, UserRoleRecord> USER_USER_ROLE_USER_ROLE_ID_FK = createForeignKey(org.baddev.currency.jooq.schema.Keys.KEY_USER_ROLE_PRIMARY, UserUserRole.USER_USER_ROLE, "user_user_role_user_role_id_fk", UserUserRole.USER_USER_ROLE.ROLE_ID);
    }
}
