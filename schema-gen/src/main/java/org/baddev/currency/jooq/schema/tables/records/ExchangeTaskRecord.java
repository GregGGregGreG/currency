/**
 * This class is generated by jOOQ
 */
package org.baddev.currency.jooq.schema.tables.records;


import org.baddev.currency.jooq.schema.tables.ExchangeTask;
import org.joda.time.LocalDateTime;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeTaskRecord extends UpdatableRecordImpl<ExchangeTaskRecord> implements Record7<Long, LocalDateTime, String, String, Double, String, Boolean> {

    private static final long serialVersionUID = -1008474197;

    /**
     * Setter for <code>exchanger.exchange_task.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>exchanger.exchange_task.added_datetime</code>.
     */
    public void setAddedDatetime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.added_datetime</code>.
     */
    public LocalDateTime getAddedDatetime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>exchanger.exchange_task.from_ccy</code>.
     */
    public void setFromCcy(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.from_ccy</code>.
     */
    public String getFromCcy() {
        return (String) get(2);
    }

    /**
     * Setter for <code>exchanger.exchange_task.to_ccy</code>.
     */
    public void setToCcy(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.to_ccy</code>.
     */
    public String getToCcy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>exchanger.exchange_task.amount</code>.
     */
    public void setAmount(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>exchanger.exchange_task.cron</code>.
     */
    public void setCron(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.cron</code>.
     */
    public String getCron() {
        return (String) get(5);
    }

    /**
     * Setter for <code>exchanger.exchange_task.active</code>.
     */
    public void setActive(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>exchanger.exchange_task.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Long, LocalDateTime, String, String, Double, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Long, LocalDateTime, String, String, Double, String, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return ExchangeTask.EXCHANGE_TASK.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field2() {
        return ExchangeTask.EXCHANGE_TASK.ADDED_DATETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return ExchangeTask.EXCHANGE_TASK.FROM_CCY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return ExchangeTask.EXCHANGE_TASK.TO_CCY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return ExchangeTask.EXCHANGE_TASK.AMOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return ExchangeTask.EXCHANGE_TASK.CRON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field7() {
        return ExchangeTask.EXCHANGE_TASK.ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value2() {
        return getAddedDatetime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getFromCcy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getToCcy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getAmount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getCron();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value7() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value2(LocalDateTime value) {
        setAddedDatetime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value3(String value) {
        setFromCcy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value4(String value) {
        setToCcy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value5(Double value) {
        setAmount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value6(String value) {
        setCron(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord value7(Boolean value) {
        setActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTaskRecord values(Long value1, LocalDateTime value2, String value3, String value4, Double value5, String value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExchangeTaskRecord
     */
    public ExchangeTaskRecord() {
        super(ExchangeTask.EXCHANGE_TASK);
    }

    /**
     * Create a detached, initialised ExchangeTaskRecord
     */
    public ExchangeTaskRecord(Long id, LocalDateTime addedDatetime, String fromCcy, String toCcy, Double amount, String cron, Boolean active) {
        super(ExchangeTask.EXCHANGE_TASK);

        set(0, id);
        set(1, addedDatetime);
        set(2, fromCcy);
        set(3, toCcy);
        set(4, amount);
        set(5, cron);
        set(6, active);
    }
}
