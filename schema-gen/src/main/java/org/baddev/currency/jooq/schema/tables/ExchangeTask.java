/**
 * This class is generated by jOOQ
 */
package org.baddev.currency.jooq.schema.tables;


import org.baddev.currency.jooq.config.ByteToBooleanConverter;
import org.baddev.currency.jooq.config.TimestampToLocalDateTimeConverter;
import org.baddev.currency.jooq.schema.Exchanger;
import org.baddev.currency.jooq.schema.Keys;
import org.baddev.currency.jooq.schema.tables.records.ExchangeTaskRecord;
import org.joda.time.LocalDateTime;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeTask extends TableImpl<ExchangeTaskRecord> {

    private static final long serialVersionUID = -1828919544;

    /**
     * The reference instance of <code>exchanger.exchange_task</code>
     */
    public static final ExchangeTask EXCHANGE_TASK = new ExchangeTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangeTaskRecord> getRecordType() {
        return ExchangeTaskRecord.class;
    }

    /**
     * The column <code>exchanger.exchange_task.id</code>.
     */
    public final TableField<ExchangeTaskRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>exchanger.exchange_task.added_datetime</code>.
     */
    public final TableField<ExchangeTaskRecord, LocalDateTime> ADDED_DATETIME = createField("added_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampToLocalDateTimeConverter());

    /**
     * The column <code>exchanger.exchange_task.from_ccy</code>.
     */
    public final TableField<ExchangeTaskRecord, String> FROM_CCY = createField("from_ccy", org.jooq.impl.SQLDataType.VARCHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>exchanger.exchange_task.to_ccy</code>.
     */
    public final TableField<ExchangeTaskRecord, String> TO_CCY = createField("to_ccy", org.jooq.impl.SQLDataType.VARCHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>exchanger.exchange_task.amount</code>.
     */
    public final TableField<ExchangeTaskRecord, Double> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>exchanger.exchange_task.cron</code>.
     */
    public final TableField<ExchangeTaskRecord, String> CRON = createField("cron", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>exchanger.exchange_task.active</code>.
     */
    public final TableField<ExchangeTaskRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * Create a <code>exchanger.exchange_task</code> table reference
     */
    public ExchangeTask() {
        this("exchange_task", null);
    }

    /**
     * Create an aliased <code>exchanger.exchange_task</code> table reference
     */
    public ExchangeTask(String alias) {
        this(alias, EXCHANGE_TASK);
    }

    private ExchangeTask(String alias, Table<ExchangeTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExchangeTask(String alias, Table<ExchangeTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchanger.EXCHANGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExchangeTaskRecord> getPrimaryKey() {
        return Keys.KEY_EXCHANGE_TASK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExchangeTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<ExchangeTaskRecord>>asList(Keys.KEY_EXCHANGE_TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeTask as(String alias) {
        return new ExchangeTask(alias, this);
    }

    /**
     * Rename this table
     */
    public ExchangeTask rename(String name) {
        return new ExchangeTask(name, null);
    }
}
